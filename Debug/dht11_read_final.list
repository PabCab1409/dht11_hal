
dht11_read_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e30  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ff8  08001ff8  00011ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002008  08002008  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002008  08002008  00012008  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002010  08002010  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000008c  2000000c  08002024  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08002024  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000873d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001739  00000000  00000000  000287bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009d0  00000000  00000000  00029ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000792  00000000  00000000  0002a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d5a  00000000  00000000  0002b05a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8cc  00000000  00000000  0003edb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c132  00000000  00000000  00049680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028a8  00000000  00000000  000c57b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000c805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001fe0 	.word	0x08001fe0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001fe0 	.word	0x08001fe0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
float temp1, temp2, hum1, hum2;
uint16_t SUM;



int main(void){
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0

  HAL_Init();
 8000508:	f000 faf0 	bl	8000aec <HAL_Init>
  SystemClock_Config();
 800050c:	f000 f864 	bl	80005d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000510:	f000 f8cc 	bl	80006ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000514:	f000 f8f8 	bl	8000708 <MX_TIM1_Init>
  HAL_TIM_Base_Start(&htim1);
 8000518:	4825      	ldr	r0, [pc, #148]	; (80005b0 <main+0xac>)
 800051a:	f001 fac9 	bl	8001ab0 <HAL_TIM_Base_Start>

  while (1) {
	  //unstable status 1seg delay
	  HAL_Delay(1000);
 800051e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000522:	f000 fb55 	bl	8000bd0 <HAL_Delay>
	  init_DHT11();
 8000526:	f000 f93f 	bl	80007a8 <init_DHT11>
	  Rh_byte1 =  read_dht11();
 800052a:	f000 f9bb 	bl	80008a4 <read_dht11>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <main+0xb0>)
 8000534:	701a      	strb	r2, [r3, #0]
	  hum1 = Rh_byte1;
 8000536:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <main+0xb0>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	ee07 3a90 	vmov	s15, r3
 800053e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <main+0xb4>)
 8000544:	edc3 7a00 	vstr	s15, [r3]
	  Rh_byte2 =  read_dht11();
 8000548:	f000 f9ac 	bl	80008a4 <read_dht11>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	4b1a      	ldr	r3, [pc, #104]	; (80005bc <main+0xb8>)
 8000552:	701a      	strb	r2, [r3, #0]
	  hum2 = Rh_byte2;
 8000554:	4b19      	ldr	r3, [pc, #100]	; (80005bc <main+0xb8>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	ee07 3a90 	vmov	s15, r3
 800055c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000560:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <main+0xbc>)
 8000562:	edc3 7a00 	vstr	s15, [r3]
	  Temp_byte1 =  read_dht11();
 8000566:	f000 f99d 	bl	80008a4 <read_dht11>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <main+0xc0>)
 8000570:	701a      	strb	r2, [r3, #0]
	  temp1 = Temp_byte1;
 8000572:	4b14      	ldr	r3, [pc, #80]	; (80005c4 <main+0xc0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	ee07 3a90 	vmov	s15, r3
 800057a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800057e:	4b12      	ldr	r3, [pc, #72]	; (80005c8 <main+0xc4>)
 8000580:	edc3 7a00 	vstr	s15, [r3]
	  Temp_byte2 =  read_dht11();
 8000584:	f000 f98e 	bl	80008a4 <read_dht11>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0xc8>)
 800058e:	701a      	strb	r2, [r3, #0]
	  temp2 = Temp_byte2;
 8000590:	4b0e      	ldr	r3, [pc, #56]	; (80005cc <main+0xc8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	ee07 3a90 	vmov	s15, r3
 8000598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800059c:	4b0c      	ldr	r3, [pc, #48]	; (80005d0 <main+0xcc>)
 800059e:	edc3 7a00 	vstr	s15, [r3]
	  SUM = read_dht11();
 80005a2:	f000 f97f 	bl	80008a4 <read_dht11>
 80005a6:	4603      	mov	r3, r0
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <main+0xd0>)
 80005ac:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 80005ae:	e7b6      	b.n	800051e <main+0x1a>
 80005b0:	20000028 	.word	0x20000028
 80005b4:	20000079 	.word	0x20000079
 80005b8:	20000088 	.word	0x20000088
 80005bc:	2000007a 	.word	0x2000007a
 80005c0:	2000008c 	.word	0x2000008c
 80005c4:	2000007b 	.word	0x2000007b
 80005c8:	20000080 	.word	0x20000080
 80005cc:	2000007c 	.word	0x2000007c
 80005d0:	20000084 	.word	0x20000084
 80005d4:	20000090 	.word	0x20000090

080005d8 <SystemClock_Config>:
  }

}

void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fcce 	bl	8001f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <SystemClock_Config+0xcc>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a27      	ldr	r2, [pc, #156]	; (80006a4 <SystemClock_Config+0xcc>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xcc>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <SystemClock_Config+0xd0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <SystemClock_Config+0xd0>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <SystemClock_Config+0xd0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	603b      	str	r3, [r7, #0]
 8000632:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000634:	2302      	movs	r3, #2
 8000636:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	2301      	movs	r3, #1
 800063a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063c:	2310      	movs	r3, #16
 800063e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000640:	2302      	movs	r3, #2
 8000642:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000644:	2300      	movs	r3, #0
 8000646:	63bb      	str	r3, [r7, #56]	; 0x38
//  RCC_OscInitStruct.PLL.PLLM = 16;
//  RCC_OscInitStruct.PLL.PLLN = 336;
//  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000648:	2308      	movs	r3, #8
 800064a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	2302      	movs	r3, #2
 800065a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065c:	f107 031c 	add.w	r3, r7, #28
 8000660:	4618      	mov	r0, r3
 8000662:	f000 ff51 	bl	8001508 <HAL_RCC_OscConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800066c:	f000 f988 	bl	8000980 <Error_Handler>
  }


  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000670:	230f      	movs	r3, #15
 8000672:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000674:	2302      	movs	r3, #2
 8000676:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]

//  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
//  {
//    Error_Handler();
//  }
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000686:	f107 0308 	add.w	r3, r7, #8
 800068a:	2103      	movs	r1, #3
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fd4f 	bl	8001130 <HAL_RCC_ClockConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0xc4>
    {
      Error_Handler();
 8000698:	f000 f972 	bl	8000980 <Error_Handler>
    }
}
 800069c:	bf00      	nop
 800069e:	3750      	adds	r7, #80	; 0x50
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40007000 	.word	0x40007000

080006ac <MX_GPIO_Init>:

static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	603b      	str	r3, [r7, #0]
 80006c4:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_GPIO_Init+0x54>)
 80006c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <MX_GPIO_Init+0x54>)
 80006ca:	f043 0304 	orr.w	r3, r3, #4
 80006ce:	6313      	str	r3, [r2, #48]	; 0x30
 80006d0:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_GPIO_Init+0x54>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d4:	f003 0304 	and.w	r3, r3, #4
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : DHT11_pin */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80006e2:	2311      	movs	r3, #17
 80006e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	; (8000704 <MX_GPIO_Init+0x58>)
 80006f4:	f000 fb76 	bl	8000de4 <HAL_GPIO_Init>
}
 80006f8:	bf00      	nop
 80006fa:	3718      	adds	r7, #24
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020800 	.word	0x40020800

08000708 <MX_TIM1_Init>:

static void MX_TIM1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071c:	463b      	mov	r3, r7
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000724:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <MX_TIM1_Init+0x9c>)
 8000728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_TIM1_Init+0x98>)
 800072c:	2263      	movs	r2, #99	; 0x63
 800072e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000730:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000736:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000738:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800073c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_TIM1_Init+0x98>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000750:	4813      	ldr	r0, [pc, #76]	; (80007a0 <MX_TIM1_Init+0x98>)
 8000752:	f001 f95d 	bl	8001a10 <HAL_TIM_Base_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800075c:	f000 f910 	bl	8000980 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000764:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000766:	f107 0308 	add.w	r3, r7, #8
 800076a:	4619      	mov	r1, r3
 800076c:	480c      	ldr	r0, [pc, #48]	; (80007a0 <MX_TIM1_Init+0x98>)
 800076e:	f001 f9e5 	bl	8001b3c <HAL_TIM_ConfigClockSource>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000778:	f000 f902 	bl	8000980 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000784:	463b      	mov	r3, r7
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <MX_TIM1_Init+0x98>)
 800078a:	f001 fba3 	bl	8001ed4 <HAL_TIMEx_MasterConfigSynchronization>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000794:	f000 f8f4 	bl	8000980 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	3718      	adds	r7, #24
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000028 	.word	0x20000028
 80007a4:	40010000 	.word	0x40010000

080007a8 <init_DHT11>:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
	}

}

uint8_t init_DHT11(void) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	//if a low pulse followed by a high pulse, of 80us length both are sent after reset pulse
	//then the dht11 is ready to send data
	dht_high_signal_sent = 0;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <init_DHT11+0x78>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
	dht_low_signal_sent = 0;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <init_DHT11+0x7c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]

	//reset pulse
	set_gpio_output(DHT11_port, DHT11_pin);
 80007b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007bc:	481a      	ldr	r0, [pc, #104]	; (8000828 <init_DHT11+0x80>)
 80007be:	f000 f853 	bl	8000868 <set_gpio_output>
	HAL_GPIO_WritePin(DHT11_port, DHT11_pin, GPIO_PIN_SET);
 80007c2:	2201      	movs	r2, #1
 80007c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c8:	4817      	ldr	r0, [pc, #92]	; (8000828 <init_DHT11+0x80>)
 80007ca:	f000 fc97 	bl	80010fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DHT11_port, DHT11_pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d4:	4814      	ldr	r0, [pc, #80]	; (8000828 <init_DHT11+0x80>)
 80007d6:	f000 fc91 	bl	80010fc <HAL_GPIO_WritePin>
	HAL_Delay(18);
 80007da:	2012      	movs	r0, #18
 80007dc:	f000 f9f8 	bl	8000bd0 <HAL_Delay>
	set_gpio_input(DHT11_port, DHT11_pin);
 80007e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007e4:	4810      	ldr	r0, [pc, #64]	; (8000828 <init_DHT11+0x80>)
 80007e6:	f000 f821 	bl	800082c <set_gpio_input>

	//check dht11's response
	//maybe is not necesary to check if it is low
	while (is_dht_signal_low);
 80007ea:	bf00      	nop
 80007ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f0:	480d      	ldr	r0, [pc, #52]	; (8000828 <init_DHT11+0x80>)
 80007f2:	f000 fc6b 	bl	80010cc <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d0f7      	beq.n	80007ec <init_DHT11+0x44>
	dht_low_signal_sent = 1;
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <init_DHT11+0x7c>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]

	while(is_dht_signal_high){
 8000802:	bf00      	nop
 8000804:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <init_DHT11+0x80>)
 800080a:	f000 fc5f 	bl	80010cc <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f7      	bne.n	8000804 <init_DHT11+0x5c>
		//TODO crear como un reloj que si llegua a 400us determine que ha sufrido un timeout
	}
	dht_high_signal_sent = 1;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <init_DHT11+0x78>)
 8000816:	2201      	movs	r2, #1
 8000818:	601a      	str	r2, [r3, #0]

	return 1;
 800081a:	2301      	movs	r3, #1
}
 800081c:	4618      	mov	r0, r3
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000070 	.word	0x20000070
 8000824:	20000074 	.word	0x20000074
 8000828:	40020800 	.word	0x40020800

0800082c <set_gpio_input>:

void set_gpio_input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b088      	sub	sp, #32
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
 8000846:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000850:	2301      	movs	r3, #1
 8000852:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	4619      	mov	r1, r3
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 fac2 	bl	8000de4 <HAL_GPIO_Init>

}
 8000860:	bf00      	nop
 8000862:	3720      	adds	r7, #32
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <set_gpio_output>:

void set_gpio_output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
 800087e:	609a      	str	r2, [r3, #8]
 8000880:	60da      	str	r2, [r3, #12]
 8000882:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000884:	887b      	ldrh	r3, [r7, #2]
 8000886:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000888:	2311      	movs	r3, #17
 800088a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 faa4 	bl	8000de4 <HAL_GPIO_Init>

}
 800089c:	bf00      	nop
 800089e:	3720      	adds	r7, #32
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <read_dht11>:

	return 0;

}

uint8_t read_dht11(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
//
//	if(!dht11_is_ready()){
//		init_DHT11();
//	}

	for (int j = 0; j < 8; ++j) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	e040      	b.n	8000932 <read_dht11+0x8e>

		//start to transmit 1-bit data (50us)
		while (is_dht_signal_low);
 80008b0:	bf00      	nop
 80008b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b6:	4823      	ldr	r0, [pc, #140]	; (8000944 <read_dht11+0xa0>)
 80008b8:	f000 fc08 	bl	80010cc <HAL_GPIO_ReadPin>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f7      	beq.n	80008b2 <read_dht11+0xe>

		//26-28us voltage-lentgh bit means 0
		//70us voltage-lentgh bit means 1
		//so if it is low after 30us, it means that bit is 1
		delay_us(30);
 80008c2:	201e      	movs	r0, #30
 80008c4:	f000 f842 	bl	800094c <delay_us>
		if (is_dht_signal_low) {
 80008c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008cc:	481d      	ldr	r0, [pc, #116]	; (8000944 <read_dht11+0xa0>)
 80008ce:	f000 fbfd 	bl	80010cc <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d111      	bne.n	80008fc <read_dht11+0x58>
			i&= ~(1<<(7-j));	//bit is 0
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f1c3 0307 	rsb	r3, r3, #7
 80008de:	2201      	movs	r2, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	43db      	mvns	r3, r3
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	4b17      	ldr	r3, [pc, #92]	; (8000948 <read_dht11+0xa4>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4013      	ands	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b14      	ldr	r3, [pc, #80]	; (8000948 <read_dht11+0xa4>)
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e00e      	b.n	800091a <read_dht11+0x76>
		}
		else{
			i|= (1<<(7-j));		//bit is 1
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2201      	movs	r2, #1
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	b25a      	sxtb	r2, r3
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <read_dht11+0xa4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b25b      	sxtb	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b25b      	sxtb	r3, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <read_dht11+0xa4>)
 8000918:	701a      	strb	r2, [r3, #0]
		}
		while (is_dht_signal_high);
 800091a:	bf00      	nop
 800091c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <read_dht11+0xa0>)
 8000922:	f000 fbd3 	bl	80010cc <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d1f7      	bne.n	800091c <read_dht11+0x78>
	for (int j = 0; j < 8; ++j) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3301      	adds	r3, #1
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	2b07      	cmp	r3, #7
 8000936:	ddbb      	ble.n	80008b0 <read_dht11+0xc>

	}

	return i;
 8000938:	4b03      	ldr	r3, [pc, #12]	; (8000948 <read_dht11+0xa4>)
 800093a:	781b      	ldrb	r3, [r3, #0]

}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40020800 	.word	0x40020800
 8000948:	20000078 	.word	0x20000078

0800094c <delay_us>:

void delay_us(uint16_t us) {
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 8000956:	4b09      	ldr	r3, [pc, #36]	; (800097c <delay_us+0x30>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 800095e:	bf00      	nop
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <delay_us+0x30>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	429a      	cmp	r2, r3
 800096a:	d3f9      	bcc.n	8000960 <delay_us+0x14>
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000028 	.word	0x20000028

08000980 <Error_Handler>:

void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	e7fe      	b.n	8000988 <Error_Handler+0x8>
	...

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800099a:	4a0f      	ldr	r2, [pc, #60]	; (80009d8 <HAL_MspInit+0x4c>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	; 0x44
 80009a2:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_MspInit+0x4c>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_MspInit+0x4c>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_MspInit+0x4c>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ca:	2007      	movs	r0, #7
 80009cc:	f000 f9d6 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40023800 	.word	0x40023800

080009dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <HAL_TIM_Base_MspInit+0x3c>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d10d      	bne.n	8000a0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b0a      	ldr	r3, [pc, #40]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	4a09      	ldr	r2, [pc, #36]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6453      	str	r3, [r2, #68]	; 0x44
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <HAL_TIM_Base_MspInit+0x40>)
 8000a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3714      	adds	r7, #20
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40010000 	.word	0x40010000
 8000a1c:	40023800 	.word	0x40023800

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	e7fe      	b.n	8000a24 <NMI_Handler+0x4>

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <UsageFault_Handler+0x4>

08000a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a6c:	f000 f890 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <SystemInit+0x20>)
 8000a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a7e:	4a05      	ldr	r2, [pc, #20]	; (8000a94 <SystemInit+0x20>)
 8000a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a9c:	f7ff ffea 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	; (8000ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f001 fa67 	bl	8001f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aca:	f7ff fd1b 	bl	8000504 <main>
  bx  lr    
 8000ace:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ad0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000adc:	08002018 	.word	0x08002018
  ldr r2, =_sbss
 8000ae0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ae4:	20000098 	.word	0x20000098

08000ae8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC_IRQHandler>
	...

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_Init+0x40>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <HAL_Init+0x40>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000afc:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <HAL_Init+0x40>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0a      	ldr	r2, [pc, #40]	; (8000b2c <HAL_Init+0x40>)
 8000b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x40>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x40>)
 8000b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f931 	bl	8000d7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff ff34 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023c00 	.word	0x40023c00

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b6c:	f000 f911 	bl	8000d92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000000 	.word	0x20000000
 8000b88:	20000008 	.word	0x20000008
 8000b8c:	20000004 	.word	0x20000004

08000b90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000094 	.word	0x20000094

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000094 	.word	0x20000094

08000bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd8:	f7ff ffee 	bl	8000bb8 <HAL_GetTick>
 8000bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000be8:	d005      	beq.n	8000bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_Delay+0x44>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bf6:	bf00      	nop
 8000bf8:	f7ff ffde 	bl	8000bb8 <HAL_GetTick>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d8f7      	bhi.n	8000bf8 <HAL_Delay+0x28>
  {
  }
}
 8000c08:	bf00      	nop
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008

08000c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f003 0307 	and.w	r3, r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c34:	4013      	ands	r3, r2
 8000c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	; (8000c5c <__NVIC_SetPriorityGrouping+0x44>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <__NVIC_GetPriorityGrouping+0x18>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	0a1b      	lsrs	r3, r3, #8
 8000c6a:	f003 0307 	and.w	r3, r3, #7
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d48:	d301      	bcc.n	8000d4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e00f      	b.n	8000d6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <SysTick_Config+0x40>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d56:	210f      	movs	r1, #15
 8000d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d5c:	f7ff ff8e 	bl	8000c7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <SysTick_Config+0x40>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d66:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <SysTick_Config+0x40>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	e000e010 	.word	0xe000e010

08000d7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f7ff ff47 	bl	8000c18 <__NVIC_SetPriorityGrouping>
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b086      	sub	sp, #24
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	4603      	mov	r3, r0
 8000d9a:	60b9      	str	r1, [r7, #8]
 8000d9c:	607a      	str	r2, [r7, #4]
 8000d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5c 	bl	8000c60 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff8e 	bl	8000cd0 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5d 	bl	8000c7c <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb0 	bl	8000d38 <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b089      	sub	sp, #36	; 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
 8000dec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	e14d      	b.n	800109c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e00:	2201      	movs	r2, #1
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	697a      	ldr	r2, [r7, #20]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	f040 813c 	bne.w	8001096 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d005      	beq.n	8000e36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d130      	bne.n	8000e98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	091b      	lsrs	r3, r3, #4
 8000e82:	f003 0201 	and.w	r2, r3, #1
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d017      	beq.n	8000ed4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	2203      	movs	r2, #3
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	43db      	mvns	r3, r3
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d123      	bne.n	8000f28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	08da      	lsrs	r2, r3, #3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	3208      	adds	r2, #8
 8000ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	220f      	movs	r2, #15
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	691a      	ldr	r2, [r3, #16]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0307 	and.w	r3, r3, #7
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	08da      	lsrs	r2, r3, #3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3208      	adds	r2, #8
 8000f22:	69b9      	ldr	r1, [r7, #24]
 8000f24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	2203      	movs	r2, #3
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f003 0203 	and.w	r2, r3, #3
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 8096 	beq.w	8001096 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a50      	ldr	r2, [pc, #320]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b4e      	ldr	r3, [pc, #312]	; (80010b4 <HAL_GPIO_Init+0x2d0>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f86:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3302      	adds	r3, #2
 8000f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a43      	ldr	r2, [pc, #268]	; (80010bc <HAL_GPIO_Init+0x2d8>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d00d      	beq.n	8000fce <HAL_GPIO_Init+0x1ea>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_GPIO_Init+0x2dc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d007      	beq.n	8000fca <HAL_GPIO_Init+0x1e6>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <HAL_GPIO_Init+0x2e0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d101      	bne.n	8000fc6 <HAL_GPIO_Init+0x1e2>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e004      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fc6:	2307      	movs	r3, #7
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x1ec>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	69fa      	ldr	r2, [r7, #28]
 8000fd2:	f002 0203 	and.w	r2, r2, #3
 8000fd6:	0092      	lsls	r2, r2, #2
 8000fd8:	4093      	lsls	r3, r2
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe0:	4935      	ldr	r1, [pc, #212]	; (80010b8 <HAL_GPIO_Init+0x2d4>)
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	089b      	lsrs	r3, r3, #2
 8000fe6:	3302      	adds	r3, #2
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fee:	4b36      	ldr	r3, [pc, #216]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001012:	4a2d      	ldr	r2, [pc, #180]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001018:	4b2b      	ldr	r3, [pc, #172]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800103c:	4a22      	ldr	r2, [pc, #136]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 800103e:	69bb      	ldr	r3, [r7, #24]
 8001040:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001042:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d003      	beq.n	8001066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001066:	4a18      	ldr	r2, [pc, #96]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b16      	ldr	r3, [pc, #88]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	43db      	mvns	r3, r3
 8001076:	69ba      	ldr	r2, [r7, #24]
 8001078:	4013      	ands	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_GPIO_Init+0x2e4>)
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b0f      	cmp	r3, #15
 80010a0:	f67f aeae 	bls.w	8000e00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a4:	bf00      	nop
 80010a6:	bf00      	nop
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40013c00 	.word	0x40013c00

080010cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	460b      	mov	r3, r1
 80010d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	887b      	ldrh	r3, [r7, #2]
 80010de:	4013      	ands	r3, r2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010e4:	2301      	movs	r3, #1
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3714      	adds	r7, #20
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
 8001108:	4613      	mov	r3, r2
 800110a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800110c:	787b      	ldrb	r3, [r7, #1]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001118:	e003      	b.n	8001122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	041a      	lsls	r2, r3, #16
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	619a      	str	r2, [r3, #24]
}
 8001122:	bf00      	nop
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0cc      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b68      	ldr	r3, [pc, #416]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d90c      	bls.n	800116c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b65      	ldr	r3, [pc, #404]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	4b63      	ldr	r3, [pc, #396]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	429a      	cmp	r2, r3
 8001166:	d001      	beq.n	800116c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e0b8      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d020      	beq.n	80011ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0304 	and.w	r3, r3, #4
 8001180:	2b00      	cmp	r3, #0
 8001182:	d005      	beq.n	8001190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001184:	4b59      	ldr	r3, [pc, #356]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4a58      	ldr	r2, [pc, #352]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800118e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0308 	and.w	r3, r3, #8
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800119c:	4b53      	ldr	r3, [pc, #332]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	4a52      	ldr	r2, [pc, #328]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011a8:	4b50      	ldr	r3, [pc, #320]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	494d      	ldr	r1, [pc, #308]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011b6:	4313      	orrs	r3, r2
 80011b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d044      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	4b47      	ldr	r3, [pc, #284]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d119      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e07f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d003      	beq.n	80011ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b3f      	ldr	r3, [pc, #252]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e06f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e067      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b37      	ldr	r3, [pc, #220]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4934      	ldr	r1, [pc, #208]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fcca 	bl	8000bb8 <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fcc6 	bl	8000bb8 <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	; 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e04f      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2b      	ldr	r3, [pc, #172]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b25      	ldr	r3, [pc, #148]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d20c      	bcs.n	8001278 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001266:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	683a      	ldr	r2, [r7, #0]
 8001270:	429a      	cmp	r2, r3
 8001272:	d001      	beq.n	8001278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	e032      	b.n	80012de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d008      	beq.n	8001296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	4916      	ldr	r1, [pc, #88]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0308 	and.w	r3, r3, #8
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	490e      	ldr	r1, [pc, #56]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012b6:	f000 f821 	bl	80012fc <HAL_RCC_GetSysClockFreq>
 80012ba:	4602      	mov	r2, r0
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_RCC_ClockConfig+0x1bc>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	091b      	lsrs	r3, r3, #4
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	490a      	ldr	r1, [pc, #40]	; (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 80012c8:	5ccb      	ldrb	r3, [r1, r3]
 80012ca:	fa22 f303 	lsr.w	r3, r2, r3
 80012ce:	4a09      	ldr	r2, [pc, #36]	; (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fc2a 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023c00 	.word	0x40023c00
 80012ec:	40023800 	.word	0x40023800
 80012f0:	08001ff8 	.word	0x08001ff8
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001300:	b094      	sub	sp, #80	; 0x50
 8001302:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001304:	2300      	movs	r3, #0
 8001306:	647b      	str	r3, [r7, #68]	; 0x44
 8001308:	2300      	movs	r3, #0
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800130c:	2300      	movs	r3, #0
 800130e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001314:	4b79      	ldr	r3, [pc, #484]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b08      	cmp	r3, #8
 800131e:	d00d      	beq.n	800133c <HAL_RCC_GetSysClockFreq+0x40>
 8001320:	2b08      	cmp	r3, #8
 8001322:	f200 80e1 	bhi.w	80014e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_RCC_GetSysClockFreq+0x34>
 800132a:	2b04      	cmp	r3, #4
 800132c:	d003      	beq.n	8001336 <HAL_RCC_GetSysClockFreq+0x3a>
 800132e:	e0db      	b.n	80014e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001330:	4b73      	ldr	r3, [pc, #460]	; (8001500 <HAL_RCC_GetSysClockFreq+0x204>)
 8001332:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001334:	e0db      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001336:	4b73      	ldr	r3, [pc, #460]	; (8001504 <HAL_RCC_GetSysClockFreq+0x208>)
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800133a:	e0d8      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800133c:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d063      	beq.n	800141a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001352:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	099b      	lsrs	r3, r3, #6
 8001358:	2200      	movs	r2, #0
 800135a:	63bb      	str	r3, [r7, #56]	; 0x38
 800135c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800135e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001364:	633b      	str	r3, [r7, #48]	; 0x30
 8001366:	2300      	movs	r3, #0
 8001368:	637b      	str	r3, [r7, #52]	; 0x34
 800136a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800136e:	4622      	mov	r2, r4
 8001370:	462b      	mov	r3, r5
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	f04f 0100 	mov.w	r1, #0
 800137a:	0159      	lsls	r1, r3, #5
 800137c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001380:	0150      	lsls	r0, r2, #5
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4621      	mov	r1, r4
 8001388:	1a51      	subs	r1, r2, r1
 800138a:	6139      	str	r1, [r7, #16]
 800138c:	4629      	mov	r1, r5
 800138e:	eb63 0301 	sbc.w	r3, r3, r1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	f04f 0200 	mov.w	r2, #0
 8001398:	f04f 0300 	mov.w	r3, #0
 800139c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80013a0:	4659      	mov	r1, fp
 80013a2:	018b      	lsls	r3, r1, #6
 80013a4:	4651      	mov	r1, sl
 80013a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013aa:	4651      	mov	r1, sl
 80013ac:	018a      	lsls	r2, r1, #6
 80013ae:	4651      	mov	r1, sl
 80013b0:	ebb2 0801 	subs.w	r8, r2, r1
 80013b4:	4659      	mov	r1, fp
 80013b6:	eb63 0901 	sbc.w	r9, r3, r1
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f04f 0300 	mov.w	r3, #0
 80013c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013ce:	4690      	mov	r8, r2
 80013d0:	4699      	mov	r9, r3
 80013d2:	4623      	mov	r3, r4
 80013d4:	eb18 0303 	adds.w	r3, r8, r3
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	462b      	mov	r3, r5
 80013dc:	eb49 0303 	adc.w	r3, r9, r3
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013ee:	4629      	mov	r1, r5
 80013f0:	024b      	lsls	r3, r1, #9
 80013f2:	4621      	mov	r1, r4
 80013f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013f8:	4621      	mov	r1, r4
 80013fa:	024a      	lsls	r2, r1, #9
 80013fc:	4610      	mov	r0, r2
 80013fe:	4619      	mov	r1, r3
 8001400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001402:	2200      	movs	r2, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
 8001406:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001408:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800140c:	f7fe fefc 	bl	8000208 <__aeabi_uldivmod>
 8001410:	4602      	mov	r2, r0
 8001412:	460b      	mov	r3, r1
 8001414:	4613      	mov	r3, r2
 8001416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001418:	e058      	b.n	80014cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800141a:	4b38      	ldr	r3, [pc, #224]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	099b      	lsrs	r3, r3, #6
 8001420:	2200      	movs	r2, #0
 8001422:	4618      	mov	r0, r3
 8001424:	4611      	mov	r1, r2
 8001426:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	2300      	movs	r3, #0
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
 8001430:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001434:	4642      	mov	r2, r8
 8001436:	464b      	mov	r3, r9
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	0159      	lsls	r1, r3, #5
 8001442:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001446:	0150      	lsls	r0, r2, #5
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4641      	mov	r1, r8
 800144e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001452:	4649      	mov	r1, r9
 8001454:	eb63 0b01 	sbc.w	fp, r3, r1
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	f04f 0300 	mov.w	r3, #0
 8001460:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001464:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001468:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800146c:	ebb2 040a 	subs.w	r4, r2, sl
 8001470:	eb63 050b 	sbc.w	r5, r3, fp
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	00eb      	lsls	r3, r5, #3
 800147e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001482:	00e2      	lsls	r2, r4, #3
 8001484:	4614      	mov	r4, r2
 8001486:	461d      	mov	r5, r3
 8001488:	4643      	mov	r3, r8
 800148a:	18e3      	adds	r3, r4, r3
 800148c:	603b      	str	r3, [r7, #0]
 800148e:	464b      	mov	r3, r9
 8001490:	eb45 0303 	adc.w	r3, r5, r3
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014a2:	4629      	mov	r1, r5
 80014a4:	028b      	lsls	r3, r1, #10
 80014a6:	4621      	mov	r1, r4
 80014a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014ac:	4621      	mov	r1, r4
 80014ae:	028a      	lsls	r2, r1, #10
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b6:	2200      	movs	r2, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	61fa      	str	r2, [r7, #28]
 80014bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014c0:	f7fe fea2 	bl	8000208 <__aeabi_uldivmod>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4613      	mov	r3, r2
 80014ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014cc:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_GetSysClockFreq+0x200>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	0c1b      	lsrs	r3, r3, #16
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	3301      	adds	r3, #1
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014e6:	e002      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <HAL_RCC_GetSysClockFreq+0x204>)
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3750      	adds	r7, #80	; 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	00f42400 	.word	0x00f42400
 8001504:	007a1200 	.word	0x007a1200

08001508 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e273      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	2b00      	cmp	r3, #0
 8001524:	d075      	beq.n	8001612 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001526:	4b88      	ldr	r3, [pc, #544]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b04      	cmp	r3, #4
 8001530:	d00c      	beq.n	800154c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001532:	4b85      	ldr	r3, [pc, #532]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800153a:	2b08      	cmp	r3, #8
 800153c:	d112      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001546:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800154a:	d10b      	bne.n	8001564 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154c:	4b7e      	ldr	r3, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d05b      	beq.n	8001610 <HAL_RCC_OscConfig+0x108>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d157      	bne.n	8001610 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e24e      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d106      	bne.n	800157c <HAL_RCC_OscConfig+0x74>
 800156e:	4b76      	ldr	r3, [pc, #472]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a75      	ldr	r2, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	e01d      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x98>
 8001586:	4b70      	ldr	r3, [pc, #448]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a6f      	ldr	r2, [pc, #444]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800158c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b6d      	ldr	r3, [pc, #436]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6c      	ldr	r2, [pc, #432]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e00b      	b.n	80015b8 <HAL_RCC_OscConfig+0xb0>
 80015a0:	4b69      	ldr	r3, [pc, #420]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a68      	ldr	r2, [pc, #416]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b66      	ldr	r3, [pc, #408]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a65      	ldr	r2, [pc, #404]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fafa 	bl	8000bb8 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff faf6 	bl	8000bb8 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e213      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015da:	4b5b      	ldr	r3, [pc, #364]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0xc0>
 80015e6:	e014      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fae6 	bl	8000bb8 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fae2 	bl	8000bb8 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e1ff      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001602:	4b51      	ldr	r3, [pc, #324]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0xe8>
 800160e:	e000      	b.n	8001612 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001610:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d063      	beq.n	80016e6 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800161e:	4b4a      	ldr	r3, [pc, #296]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b00      	cmp	r3, #0
 8001628:	d00b      	beq.n	8001642 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162a:	4b47      	ldr	r3, [pc, #284]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001632:	2b08      	cmp	r3, #8
 8001634:	d11c      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b44      	ldr	r3, [pc, #272]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d116      	bne.n	8001670 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e1d3      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165a:	4b3b      	ldr	r3, [pc, #236]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	4937      	ldr	r1, [pc, #220]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166e:	e03a      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <HAL_RCC_OscConfig+0x244>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff fa9b 	bl	8000bb8 <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001686:	f7ff fa97 	bl	8000bb8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e1b4      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001698:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f0      	beq.n	8001686 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	4925      	ldr	r1, [pc, #148]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
 80016b8:	e015      	b.n	80016e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ba:	4b24      	ldr	r3, [pc, #144]	; (800174c <HAL_RCC_OscConfig+0x244>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff fa7a 	bl	8000bb8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c8:	f7ff fa76 	bl	8000bb8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e193      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1f0      	bne.n	80016c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d036      	beq.n	8001760 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d016      	beq.n	8001728 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fa:	4b15      	ldr	r3, [pc, #84]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 80016fc:	2201      	movs	r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff fa5a 	bl	8000bb8 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001708:	f7ff fa56 	bl	8000bb8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e173      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x240>)
 800171c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0f0      	beq.n	8001708 <HAL_RCC_OscConfig+0x200>
 8001726:	e01b      	b.n	8001760 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <HAL_RCC_OscConfig+0x248>)
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172e:	f7ff fa43 	bl	8000bb8 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001734:	e00e      	b.n	8001754 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001736:	f7ff fa3f 	bl	8000bb8 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d907      	bls.n	8001754 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e15c      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
 8001748:	40023800 	.word	0x40023800
 800174c:	42470000 	.word	0x42470000
 8001750:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b8a      	ldr	r3, [pc, #552]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ea      	bne.n	8001736 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8097 	beq.w	800189c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b83      	ldr	r3, [pc, #524]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b7f      	ldr	r3, [pc, #508]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a7e      	ldr	r2, [pc, #504]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b7c      	ldr	r3, [pc, #496]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b79      	ldr	r3, [pc, #484]	; (8001984 <HAL_RCC_OscConfig+0x47c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b76      	ldr	r3, [pc, #472]	; (8001984 <HAL_RCC_OscConfig+0x47c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a75      	ldr	r2, [pc, #468]	; (8001984 <HAL_RCC_OscConfig+0x47c>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff f9ff 	bl	8000bb8 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff f9fb 	bl	8000bb8 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e118      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b6c      	ldr	r3, [pc, #432]	; (8001984 <HAL_RCC_OscConfig+0x47c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2ea>
 80017e4:	4b66      	ldr	r3, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a65      	ldr	r2, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	e01c      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x30c>
 80017fa:	4b61      	ldr	r3, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80017fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fe:	4a60      	ldr	r2, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6713      	str	r3, [r2, #112]	; 0x70
 8001806:	4b5e      	ldr	r3, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180a:	4a5d      	ldr	r2, [pc, #372]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6713      	str	r3, [r2, #112]	; 0x70
 8001812:	e00b      	b.n	800182c <HAL_RCC_OscConfig+0x324>
 8001814:	4b5a      	ldr	r3, [pc, #360]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001818:	4a59      	ldr	r2, [pc, #356]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	6713      	str	r3, [r2, #112]	; 0x70
 8001820:	4b57      	ldr	r3, [pc, #348]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001824:	4a56      	ldr	r2, [pc, #344]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001826:	f023 0304 	bic.w	r3, r3, #4
 800182a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d015      	beq.n	8001860 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff f9c0 	bl	8000bb8 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff f9bc 	bl	8000bb8 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0d7      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001852:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0ee      	beq.n	800183c <HAL_RCC_OscConfig+0x334>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff f9aa 	bl	8000bb8 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001866:	e00a      	b.n	800187e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001868:	f7ff f9a6 	bl	8000bb8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	f241 3288 	movw	r2, #5000	; 0x1388
 8001876:	4293      	cmp	r3, r2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0c1      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ee      	bne.n	8001868 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001890:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4a3a      	ldr	r2, [pc, #232]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001896:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 80ad 	beq.w	8001a00 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018a6:	4b36      	ldr	r3, [pc, #216]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d060      	beq.n	8001974 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d145      	bne.n	8001946 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <HAL_RCC_OscConfig+0x480>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c0:	f7ff f97a 	bl	8000bb8 <HAL_GetTick>
 80018c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	e008      	b.n	80018da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c8:	f7ff f976 	bl	8000bb8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e093      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018da:	4b29      	ldr	r3, [pc, #164]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f0      	bne.n	80018c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69da      	ldr	r2, [r3, #28]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	019b      	lsls	r3, r3, #6
 80018f6:	431a      	orrs	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	041b      	lsls	r3, r3, #16
 8001902:	431a      	orrs	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	071b      	lsls	r3, r3, #28
 8001912:	491b      	ldr	r1, [pc, #108]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001918:	4b1b      	ldr	r3, [pc, #108]	; (8001988 <HAL_RCC_OscConfig+0x480>)
 800191a:	2201      	movs	r2, #1
 800191c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff f94b 	bl	8000bb8 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001926:	f7ff f947 	bl	8000bb8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e064      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f0      	beq.n	8001926 <HAL_RCC_OscConfig+0x41e>
 8001944:	e05c      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x480>)
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194c:	f7ff f934 	bl	8000bb8 <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001952:	e008      	b.n	8001966 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001954:	f7ff f930 	bl	8000bb8 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e04d      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_RCC_OscConfig+0x478>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1f0      	bne.n	8001954 <HAL_RCC_OscConfig+0x44c>
 8001972:	e045      	b.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d107      	bne.n	800198c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e040      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000
 8001988:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_OscConfig+0x504>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d030      	beq.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d129      	bne.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d122      	bne.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019bc:	4013      	ands	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d119      	bne.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d10f      	bne.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d001      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e041      	b.n	8001aa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe ffd0 	bl	80009dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3304      	adds	r3, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4610      	mov	r0, r2
 8001a50:	f000 f93c 	bl	8001ccc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d001      	beq.n	8001ac8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e02d      	b.n	8001b24 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a16      	ldr	r2, [pc, #88]	; (8001b30 <HAL_TIM_Base_Start+0x80>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_TIM_Base_Start+0x3e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_TIM_Base_Start+0x84>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d004      	beq.n	8001aee <HAL_TIM_Base_Start+0x3e>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_TIM_Base_Start+0x88>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d111      	bne.n	8001b12 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2b06      	cmp	r3, #6
 8001afe:	d010      	beq.n	8001b22 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b10:	e007      	b.n	8001b22 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	40010000 	.word	0x40010000
 8001b34:	40000c00 	.word	0x40000c00
 8001b38:	40014000 	.word	0x40014000

08001b3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_TIM_ConfigClockSource+0x1c>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e0b4      	b.n	8001cc2 <HAL_TIM_ConfigClockSource+0x186>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68ba      	ldr	r2, [r7, #8]
 8001b86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b90:	d03e      	beq.n	8001c10 <HAL_TIM_ConfigClockSource+0xd4>
 8001b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b96:	f200 8087 	bhi.w	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9e:	f000 8086 	beq.w	8001cae <HAL_TIM_ConfigClockSource+0x172>
 8001ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ba6:	d87f      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001ba8:	2b70      	cmp	r3, #112	; 0x70
 8001baa:	d01a      	beq.n	8001be2 <HAL_TIM_ConfigClockSource+0xa6>
 8001bac:	2b70      	cmp	r3, #112	; 0x70
 8001bae:	d87b      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb0:	2b60      	cmp	r3, #96	; 0x60
 8001bb2:	d050      	beq.n	8001c56 <HAL_TIM_ConfigClockSource+0x11a>
 8001bb4:	2b60      	cmp	r3, #96	; 0x60
 8001bb6:	d877      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bb8:	2b50      	cmp	r3, #80	; 0x50
 8001bba:	d03c      	beq.n	8001c36 <HAL_TIM_ConfigClockSource+0xfa>
 8001bbc:	2b50      	cmp	r3, #80	; 0x50
 8001bbe:	d873      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bc0:	2b40      	cmp	r3, #64	; 0x40
 8001bc2:	d058      	beq.n	8001c76 <HAL_TIM_ConfigClockSource+0x13a>
 8001bc4:	2b40      	cmp	r3, #64	; 0x40
 8001bc6:	d86f      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bc8:	2b30      	cmp	r3, #48	; 0x30
 8001bca:	d064      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15a>
 8001bcc:	2b30      	cmp	r3, #48	; 0x30
 8001bce:	d86b      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bd0:	2b20      	cmp	r3, #32
 8001bd2:	d060      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15a>
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d867      	bhi.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d05c      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15a>
 8001bdc:	2b10      	cmp	r3, #16
 8001bde:	d05a      	beq.n	8001c96 <HAL_TIM_ConfigClockSource+0x15a>
 8001be0:	e062      	b.n	8001ca8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001bf2:	f000 f94f 	bl	8001e94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001c04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68ba      	ldr	r2, [r7, #8]
 8001c0c:	609a      	str	r2, [r3, #8]
      break;
 8001c0e:	e04f      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c20:	f000 f938 	bl	8001e94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c32:	609a      	str	r2, [r3, #8]
      break;
 8001c34:	e03c      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c42:	461a      	mov	r2, r3
 8001c44:	f000 f8ac 	bl	8001da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2150      	movs	r1, #80	; 0x50
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f905 	bl	8001e5e <TIM_ITRx_SetConfig>
      break;
 8001c54:	e02c      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c62:	461a      	mov	r2, r3
 8001c64:	f000 f8cb 	bl	8001dfe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	2160      	movs	r1, #96	; 0x60
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f000 f8f5 	bl	8001e5e <TIM_ITRx_SetConfig>
      break;
 8001c74:	e01c      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c82:	461a      	mov	r2, r3
 8001c84:	f000 f88c 	bl	8001da0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f8e5 	bl	8001e5e <TIM_ITRx_SetConfig>
      break;
 8001c94:	e00c      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	f000 f8dc 	bl	8001e5e <TIM_ITRx_SetConfig>
      break;
 8001ca6:	e003      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
      break;
 8001cac:	e000      	b.n	8001cb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001cae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	4a2c      	ldr	r2, [pc, #176]	; (8001d90 <TIM_Base_SetConfig+0xc4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d003      	beq.n	8001cec <TIM_Base_SetConfig+0x20>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a2b      	ldr	r2, [pc, #172]	; (8001d94 <TIM_Base_SetConfig+0xc8>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d108      	bne.n	8001cfe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cf2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a23      	ldr	r2, [pc, #140]	; (8001d90 <TIM_Base_SetConfig+0xc4>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d00b      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <TIM_Base_SetConfig+0xc8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d007      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a21      	ldr	r2, [pc, #132]	; (8001d98 <TIM_Base_SetConfig+0xcc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d003      	beq.n	8001d1e <TIM_Base_SetConfig+0x52>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <TIM_Base_SetConfig+0xd0>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d108      	bne.n	8001d30 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a0e      	ldr	r2, [pc, #56]	; (8001d90 <TIM_Base_SetConfig+0xc4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d103      	bne.n	8001d64 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	691b      	ldr	r3, [r3, #16]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f023 0201 	bic.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	611a      	str	r2, [r3, #16]
  }
}
 8001d82:	bf00      	nop
 8001d84:	3714      	adds	r7, #20
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40000c00 	.word	0x40000c00
 8001d98:	40014000 	.word	0x40014000
 8001d9c:	40014800 	.word	0x40014800

08001da0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b087      	sub	sp, #28
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a1b      	ldr	r3, [r3, #32]
 8001db6:	f023 0201 	bic.w	r2, r3, #1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	693a      	ldr	r2, [r7, #16]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f023 030a 	bic.w	r3, r3, #10
 8001ddc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001dde:	697a      	ldr	r2, [r7, #20]
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	621a      	str	r2, [r3, #32]
}
 8001df2:	bf00      	nop
 8001df4:	371c      	adds	r7, #28
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr

08001dfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b087      	sub	sp, #28
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f023 0210 	bic.w	r2, r3, #16
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001e28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	031b      	lsls	r3, r3, #12
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	621a      	str	r2, [r3, #32]
}
 8001e52:	bf00      	nop
 8001e54:	371c      	adds	r7, #28
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f043 0307 	orr.w	r3, r3, #7
 8001e80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	609a      	str	r2, [r3, #8]
}
 8001e88:	bf00      	nop
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b087      	sub	sp, #28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001eae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	021a      	lsls	r2, r3, #8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	609a      	str	r2, [r3, #8]
}
 8001ec8:	bf00      	nop
 8001eca:	371c      	adds	r7, #28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e041      	b.n	8001f70 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68fa      	ldr	r2, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a11      	ldr	r2, [pc, #68]	; (8001f84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10c      	bne.n	8001f5e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2201      	movs	r2, #1
 8001f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40010000 	.word	0x40010000
 8001f80:	40000c00 	.word	0x40000c00
 8001f84:	40014000 	.word	0x40014000

08001f88 <memset>:
 8001f88:	4402      	add	r2, r0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d100      	bne.n	8001f92 <memset+0xa>
 8001f90:	4770      	bx	lr
 8001f92:	f803 1b01 	strb.w	r1, [r3], #1
 8001f96:	e7f9      	b.n	8001f8c <memset+0x4>

08001f98 <__libc_init_array>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	4d0d      	ldr	r5, [pc, #52]	; (8001fd0 <__libc_init_array+0x38>)
 8001f9c:	4c0d      	ldr	r4, [pc, #52]	; (8001fd4 <__libc_init_array+0x3c>)
 8001f9e:	1b64      	subs	r4, r4, r5
 8001fa0:	10a4      	asrs	r4, r4, #2
 8001fa2:	2600      	movs	r6, #0
 8001fa4:	42a6      	cmp	r6, r4
 8001fa6:	d109      	bne.n	8001fbc <__libc_init_array+0x24>
 8001fa8:	4d0b      	ldr	r5, [pc, #44]	; (8001fd8 <__libc_init_array+0x40>)
 8001faa:	4c0c      	ldr	r4, [pc, #48]	; (8001fdc <__libc_init_array+0x44>)
 8001fac:	f000 f818 	bl	8001fe0 <_init>
 8001fb0:	1b64      	subs	r4, r4, r5
 8001fb2:	10a4      	asrs	r4, r4, #2
 8001fb4:	2600      	movs	r6, #0
 8001fb6:	42a6      	cmp	r6, r4
 8001fb8:	d105      	bne.n	8001fc6 <__libc_init_array+0x2e>
 8001fba:	bd70      	pop	{r4, r5, r6, pc}
 8001fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fc0:	4798      	blx	r3
 8001fc2:	3601      	adds	r6, #1
 8001fc4:	e7ee      	b.n	8001fa4 <__libc_init_array+0xc>
 8001fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001fca:	4798      	blx	r3
 8001fcc:	3601      	adds	r6, #1
 8001fce:	e7f2      	b.n	8001fb6 <__libc_init_array+0x1e>
 8001fd0:	08002010 	.word	0x08002010
 8001fd4:	08002010 	.word	0x08002010
 8001fd8:	08002010 	.word	0x08002010
 8001fdc:	08002014 	.word	0x08002014

08001fe0 <_init>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	bf00      	nop
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr

08001fec <_fini>:
 8001fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fee:	bf00      	nop
 8001ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ff2:	bc08      	pop	{r3}
 8001ff4:	469e      	mov	lr, r3
 8001ff6:	4770      	bx	lr
